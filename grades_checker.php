<?php
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–≤–æ–µ–∫

require_once "vendor/autoload.php";
require_once __DIR__."/class/Database.php";
require_once __DIR__."/class/GradesGetter.php";
require_once __DIR__."/models/Model.php";
require_once __DIR__."/models/UserModel.php";
require_once __DIR__."/class/Bot.php";

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏
$emojis = [
	1=>['üòû', 'üôÅ', 'üòñ', 'üò≠'],		// –ö–æ–≥–¥–∞ –¥–≤–æ–π–∫–∏ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è
	-1=>['üòÅ', 'üòÜ', 'üòÄ', 'üôÇ']		// –ö–æ–≥–¥–∞ –¥–≤–æ–π–∫–∏ —É–º–µ–Ω—å—à–∞—é—Ç—Å—è
];

// –í—ã–±–æ—Ä–∫–∞ –ª—é–¥–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
// –ò–∑–º–µ–Ω—è–π—Ç–µ LIMIT 1 –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ –≤—ã–±–æ—Ä–∫–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
function selectPeople($db) {
	return $db->query("
		SELECT vk_id, users.id as user_id, journal_login, journal_password, period_ids.value as period_id
		FROM users
		LEFT JOIN groups ON groups.id = users.gid
		LEFT JOIN period_ids ON period_ids.id = groups.period_id
		WHERE type=1 AND journal_login IS NOT NULL AND journal_password IS NOT NULL AND checked_grades_this_iteration=0
		AND users.id >= RAND() * (SELECT MAX(id) FROM users)
		ORDER BY users.id
		LIMIT 1");
}

// –ó–∞–≥—Ä—É–∑–∫–∞ .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
$dotenv = Dotenv\Dotenv::createImmutable(__DIR__);
$dotenv->load();

$db = Database::getConnection();

$response = selectPeople($db);
if ($response->num_rows == 0) {
	// –õ—é–¥–µ–π, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥ —É—Å–ª–æ–≤–∏–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –∞ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç —á—Ç–æ –º—ã –º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é
	$db->query("UPDATE users SET checked_grades_this_iteration = 0");
	$response = selectPeople($db);
}

while ($user = $response->fetch_array()) {
	$need_send_message = false;		// –ù—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
	$message = "–°–≤–æ–¥–∫–∞ –¥–≤–æ–µ–∫:\n\n";	// –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	$total_negatives = 0;			// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–æ–µ–∫
	$new_discipline_exists = 0;		// –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞, –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–Ω—å—à–µ –¢–µ—Ö–±–æ—Ç –Ω–µ –≤–∏–¥–µ–ª

	// –ü—Ä–æ—à–ª—ã–µ –æ—Ü–µ–Ω–∫–∏
	$past_grades = UserModel::getNegativeGradesCount($user['user_id'], $user['period_id']);

	// –ú–∞—Å—Å–∏–≤ —Ç–µ–∫—É—â–∏—Ö –æ—Ü–µ–Ω–æ–∫ (–Ω–µ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π)
	$now_grades_numeric = getGradesData($user['journal_login'], $user['journal_password'], $user['period_id']);

	// –ê—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ç–µ–∫—É—â–∏—Ö –æ—Ü–µ–Ω–æ–∫ (–∫–ª—é—á - –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã, –∑–Ω–∞—á–µ–Ω–∏–µ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–æ–µ–∫)
	$now_grades_assoc = [];
	foreach ($now_grades_numeric as $item) {
		$now_grades_assoc[$item[0]] = count_chars($item[1], 0)[50]; // 50 - —á–∏—Å–ª–æ 2 –≤ ascii
	}
	UserModel::saveNegativeGradesCount($user['user_id'], $now_grades_assoc, $user['period_id']);

	echo "===–¢–µ–∫—É—â–∏–µ –æ—Ü–µ–Ω–∫–∏===\n";
	print_r($now_grades_assoc);
	echo "===–ü—Ä–æ—à–ª—ã–µ –æ—Ü–µ–Ω–∫–∏===\n";
	print_r($past_grades);

	// –ï—Å–ª–∏ –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∏—Å—å, –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–ª—å—à–µ
	if (count($past_grades) == 0) {
		return;
	}

	foreach ($now_grades_assoc as $discipline => $bad_count) {
		$total_negatives += $bad_count;

		if (array_key_exists($discipline, $past_grades) == false) {
			// –í –ø—Ä–æ—à–ª–æ–º —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ
			$new_discipline_exists = true;
			
			if ($bad_count > 0) {
				// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–æ–µ–∫ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å, –ø—Ä–∏—á—ë–º —Å –Ω—É–ª—è, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–µ–¥–º–µ—Ç–∞ –µ—â—ë –Ω–µ –±—ã–ª–æ
				$past_count = 0;
				$direction = 1;
			} else {
				// –ù–µ—Ç –¥–≤–æ–µ–∫ –∏ –Ω–µ –±—ã–ª–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é
				continue;
			}
		} else {
			// –ü—Ä–µ–¥–º–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª
			$past_grades[$discipline];
			if ($bad_count > $past_grades[$discipline]) {
				// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–æ–µ–∫ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å
				$direction = 1;
	
			} else if ($bad_count < $past_grades[$discipline]) {
				// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–æ–µ–∫ —É–º–µ–Ω—å—à–∏–ª–æ—Å—å
				$direction = -1;
	
			} else {
				// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–æ–µ–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
				continue;
			}
		}

		// –ï—Å–ª–∏ continue –Ω–µ –≤—ã–∑–≤–∞–ª—Å—è, —Ç–æ –∑–Ω–∞—á–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–æ–µ–∫ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø–æ—ç—Ç–æ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
		// –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –æ–± —ç—Ç–æ–º
		$need_send_message = true;

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
		if (0 <= $bad_count && $bad_count <= 3) {
			$emoji = $emojis[$direction][0];
		} else if (3 < $bad_count && $bad_count <= 7) {
			$emoji = $emojis[$direction][1];
		} else if (7 < $bad_count && $bad_count <= 10) {
			$emoji = $emojis[$direction][2];
		} else {
			$emoji = $emojis[$direction][3];
		}

		$message .= $emoji." ".$discipline.": –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–æ–µ–∫";

		if ($direction == 1) {
			$message .= ' —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å —Å ';
		} else {
			$message .= ' —É–º–µ–Ω—å—à–∏–ª–æ—Å—å —Å ';
		}

		$message .= $past_grades[$discipline].' –¥–æ '.$bad_count."\n";
	}

	$message .= "\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–æ–µ–∫: ".$total_negatives;

	if ($need_send_message) {
		Bot::sendMessageVk($user['vk_id'], $message);
	}
}