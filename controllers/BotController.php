<?php
// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –±–æ—Ç–∞

// –°–æ—Å—Ç–æ—è–Ω–∏—è
define('STATE_REG_1', 0);		 			// –û—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ –Ω–µ—Ç
define('STATE_SELECT_COURSE', 1);			// –í—ã–±–æ—Ä –∫—É—Ä—Å–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
define('STATE_VOID', 2);					// –ù–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏ –±–æ—Ç–∞
define('STATE_REG_CAN_SEND', 3);			// –û—Ç–≤–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏
define('STATE_HUB', 4);						// –í—ã–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏
define('ENTER_LOGIN', 5);					// –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞
define('ENTER_PASSWORD', 6);				// –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è
define('ENTER_LOGIN_AFTER_PROFILE', 7);		// –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞', –ø–æ—Ç–æ–º —Å—Ç–∞–≤–∏–º 8
define('ENTER_PASSWORD_AFTER_PROFILE', 8);	// –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è', –ø–æ—Ç–æ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
define('ENTER_CAB', 9);						// –í–≤–æ–¥ –∫–∞–±–∏–Ω–µ—Ç–∞

class BotController extends Controller {

	private $responses;
	private $wait_responses;
	private $keyboards;

	public function __construct(string $request_uri) {
		parent::__construct($request_uri);

		$this->responses = array(
			"hi1"=> "–ü—Ä–∏–≤–µ—Ç, —è - –¢–µ—Ö–±–æ—Ç. –ú–æ—è –∑–∞–¥–∞—á–∞ - –æ–±–ª–µ–≥—á–∏—Ç—å —Ç–≤–æ—é –∂–∏–∑–Ω—å, –Ω–æ, –¥–ª—è –Ω–∞—á–∞–ª–∞, –º–Ω–µ –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤",
			"hi2"=> "–û–∑–Ω–∞–∫–æ–º—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∏ —Ñ—É–Ω–∫—Ü–∏–∏",
			"tos"=> "1. –Ø –º–æ–≥—É –æ—à–∏–±–∞—Ç—å—Å—è, –≤–µ–¥—å —è –≤—Å–µ–≥–æ –ª–∏—à—å –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥\n2. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç –∑–∞ –≤–æ–∑–º–æ–∂–Ω—ã–π —É—â–µ—Ä–±, –ø—Ä–∏—á–∏–Ω—ë–Ω–Ω—ã–π –æ—à–∏–±–∫–æ–π –≤ —Ñ—É–Ω–∫—Ü–∏–∏, –≤–µ–¥—å –æ–Ω–∏ –Ω–µ –º–æ–≥—É—Ç –∑–Ω–∞—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à—ë–ª —Å–±–æ–π\n3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –∏ –Ω–∏ –∫ —á–µ–º—É –≤–∞—Å –Ω–µ –æ–±—è–∑—ã–≤–∞–µ—Ç\n4. –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è",
			"question_are_you_student"=> "%d. –¢—ã —Å—Ç—É–¥–µ–Ω—Ç?",
			"question-who-are-you"=> "%d. –í—ã–±–µ—Ä–∏ —Å–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞",
			"question-who-are-you-no-number"=> "–í—ã–±–µ—Ä–∏ —Å–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞",
			"question_what_is_your_course"=> "%d. –ù–∞ –∫–∞–∫–æ–º –∫—É—Ä—Å–µ —Å–µ–π—á–∞—Å —É—á–∏—à—å—Å—è?",
			"question_what_is_your_group"=> "%d. –ö–∞–∫–∞—è –∏–∑ —ç—Ç–∏—Ö –≥—Ä—É–ø–ø —Ç–≤–æ—è?",
			"question_can_send_messages"=> "%d. –ú–æ–∂–Ω–æ –ª–∏ —Ç–µ–±–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö –∏ –¥—Ä.?",
			"welcome_post_reg"=> "–û—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
			"pick_day"=> "–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å",
			"no_relevant_data"=> "–Ø –Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞—é –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏, –ø–æ–¥–æ–∂–¥–∏ –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è",
			"enter_login"=> "–í–≤–µ–¥–∏ –ª–æ–≥–∏–Ω",
			"enter_password"=> "–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å",
			"done"=> "–ì–æ—Ç–æ–≤–æ!",
			"returning"=> "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è",
			"get-next-student"=> "–û—Å—Ç–∞—ë—Ç—Å—è {0} {1} –¥–æ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã {2}. –ù–∞—á–∞–ª–æ –≤ {4} ({3})",
			"get-next-teacher"=> "–û—Å—Ç–∞—ë—Ç—Å—è {0} {1} –¥–æ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã {2}. –ù–∞—á–∞–ª–æ –≤ {3} —Å –≥—Ä—É–ø–ø–æ–π {4} –≤ {5}",
			"get-next-fail"=> "–ù–µ —É–¥–∞–ª–æ—Å—å —É–∑–Ω–∞—Ç—å –∫–∞–∫–∞—è –ø–∞—Ä–∞ –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–µ–π",
			"select-teacher"=> "–í—ã–±–µ—Ä–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (—Å—Ç—Ä. {0}/{1})",
			"select-course"=> "–í—ã–±–µ—Ä–∏ –∫—É—Ä—Å –≥—Ä—É–ø–ø—ã",
			"select-group"=> "–í—ã–±–µ—Ä–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã",
			"no-data"=> "(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)",
			"bells-schedule"=> "–ó–≤–æ–Ω–∫–∏ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:\n1 –ø–∞—Ä–∞: 8:00 - 9:35 (–ø–µ—Ä–µ—Ä—ã–≤ –≤ 8:45)\n2 –ø–∞—Ä–∞: 9:45 - 11:20 (–ø–µ—Ä–µ—Ä—ã–≤ –≤ 10:30)\n–ö–ª —á–∞—Å: 11:30 - 12:15\n–û–±–µ–¥: 12:15-13:00\n3 –ø–∞—Ä–∞: 13:00 - 14:35 (–ø–µ—Ä–µ—Ä—ã–≤ –≤ 13:45)\n4 –ø–∞—Ä–∞: 14:45 - 16:20 (–ø–µ—Ä–µ—Ä—ã–≤ –≤ 15:30)\n5 –ø–∞—Ä–∞: 16:30 - 18:05 (–ø–µ—Ä–µ—Ä—ã–≤ –≤ 17:15).\n\n–ó–≤–æ–Ω–∫–∏ —Å–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É\n1 –ø–∞—Ä–∞: 8:00 - 9:35 (–ø–µ—Ä–µ—Ä—ã–≤ –≤ 8:45)\n2 –ø–∞—Ä–∞: 9:45 - 11:20 (–ø–µ—Ä–µ—Ä—ã–≤ –≤ 10:30)\n–û–±–µ–¥: 11:20 - 12:20\n3 –ø–∞—Ä–∞: 12:20 - 13:55 (–ø–µ—Ä–µ—Ä—ã–≤ –≤ 13:05)\n4 –ø–∞—Ä–∞: 14:05 - 15:40 (–ø–µ—Ä–µ—Ä—ã–≤ –≤ 14:50)\n5 –ø–∞—Ä–∞: 15:50 - 17:25 (–ø–µ—Ä–µ—Ä—ã–≤ –≤ 16:35)\n\n–ó–≤–æ–Ω–∫–∏ –≤ —Å—É–±–±–æ—Ç—É\n1 –ø–∞—Ä–∞: 8:00 - 9:25 (–ø–µ—Ä–µ—Ä—ã–≤ –≤ 8:40)\n2 –ø–∞—Ä–∞: 09:35 - 11:00 (–ø–µ—Ä–µ—Ä—ã–≤ –≤ 10:15)\n3 –ø–∞—Ä–∞: 11:10 - 12:35 (–ø–µ—Ä–µ—Ä—ã–≤ –≤ 11:50)\n4 –ø–∞—Ä–∞: 12:45 - 14:10 (–ø–µ—Ä–µ—Ä—ã–≤ –≤ 13:25)",
			"profile-identifier-student"=> "üë• –í–∞—à–∞ –≥—Ä—É–ø–ø–∞: {0}",
			"profile-identifier-teacher"=> "üë§ –í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è: {0}",
			"profile-journal-not-filled"=> "\n‚ö† –í—ã –Ω–µ —É–∫–∞–∑—ã–≤–∞–ª–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞",
			"profile-journal-filled"=> "\nüÜî –õ–æ–≥–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è —Å–±–æ—Ä–∞ –≤–∞—à–∏—Ö –æ—Ü–µ–Ω–æ–∫ - {0}",
			"profile-mail-allowed"=> "\n‚úÖ –í—ã —Ä–∞–∑—Ä–µ—à–∏–ª–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Ä–∞—Å—Å—ã–ª–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
			"profile-mail-not-allowed"=> "\n‚ùå –í—ã –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Ä–∞—Å—Å—ã–ª–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
			"type-cabinet"=> "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞",
			"updating-menu"=> "–û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é!",
			"started-editing"=> "–ù–∞—á–∏–Ω–∞–µ–º –∏–∑–º–µ–Ω—è—Ç—å —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å!",
			"wrong_input"=> "–≠—Ç–æ –Ω–µ –ø–æ–¥–æ–π–¥—ë—Ç",
			"admin-welcome"=> "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!",
			"enter-mail-target"=> "–í–≤–µ–¥–∏ —Ü–µ–ª—å —Ä–∞—Å—Å—ã–ª–∫–∏. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è *–ò–°, 3*, *, 3–ò–°",
			"enter-mail-message"=> "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏",
			"mail-saved"=> "–î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {0}",
			"mail-disabled"=> "–ë–æ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä–µ–≤–æ–∂—É! –ï—Å–ª–∏ —Å–Ω–æ–≤–∞ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ - —Ç–æ –≤–∫–ª—é—á–∏—Ç—å –∏—Ö –º–æ–∂–Ω–æ –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è",
			"stats"=> "–í–æ—Ç HTML —Ä–∞–∑–º–µ—Ç–∫–∞, –ø–æ–∑–≤–æ–ª—é—â–∞—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
			"no-data"=> "(–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö)",
			"exception"=> "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {0}. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª—ë–Ω"
		);

		$this->wait_responses = array(
			"–ü–æ–¥–æ–∂–¥–∏",
			"–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ",
			"–°–µ–∫—É–Ω–¥—É",
			"–ë—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ!",
			"–†–∏—Å—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É...",
			"–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ...",
			"–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç",
			"–£–∂–µ —Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ —ç—Ç–∏–º"
		);

		$this->keyboards = array(
			"yn_text"=> '{"one_time":false,"inline":false,"buttons":[[{"color":"primary","action":{"type":"text","payload":null,"label":"–î–∞"}},{"color":"negative","action":{"type":"text","payload":null,"label":"–ù–µ—Ç"}}]]}',
			"cancel"=> '{"one_time":false,"inline":false,"buttons":[[{"color":"negative","action":{"type":"text","payload":null,"label":"–û—Ç–º–µ–Ω–∞"}}]]}',
			"to-hub"=> '{"one_time":false,"inline":false,"buttons":[[{"color":"primary","action":{"type":"text","payload":null,"label":"–ù–∞ –≥–ª–∞–≤–Ω—É—é"}}]]}',
			"course_nums"=> '{"one_time":true,"inline":false,"buttons":[[{"color":"primary","action":{"type":"text","payload":null,"label":"1"}},{"color":"primary","action":{"type":"text","payload":null,"label":"2"}}],[{"color":"primary","action":{"type":"text","payload":null,"label":"3"}},{"color":"primary","action":{"type":"text","payload":null,"label":"4"}}]]}',
			"tos"=> '{"one_time":false,"inline":true,"buttons":[[{"color":"primary","action":{"type":"text","payload":"{\"type\":1}","label":"–ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"}}]]}',
			"unsubscribe"=> '{"one_time":false,"inline":true,"buttons":[[{"color":"negative","action":{"type":"text","payload":"{\"type\":9}","label":"–ó–∞–ø—Ä–µ—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏"}}]]}',
			"stud_hub"=> '{"one_time":false,"inline":false,"buttons":[[{"color":"primary","action":{"type":"text","payload":null,"label":"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"}},{"color":"primary","action":{"type":"text","payload":null,"label":"–û—Ü–µ–Ω–∫–∏"}},{"color":"primary","action":{"type":"text","payload":null,"label":"–ß—Ç–æ –¥–∞–ª—å—à–µ?"}}],[{"color":"secondary","action":{"type":"text","payload":null,"label":"–ì–¥–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å?"}},{"color":"secondary","action":{"type":"text","payload":null,"label":"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"}},{"color":"secondary","action":{"type":"text","payload":null,"label":"–ó–≤–æ–Ω–∫–∏"}}],[{"color":"secondary","action":{"type":"text","payload":null,"label":"–ü—Ä–æ—Ñ–∏–ª—å"}}]]}',
			"teacher_hub"=> '{"one_time":false,"inline":false,"buttons":[[{"color":"primary","action":{"type":"text","payload":null,"label":"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"}},{"color":"primary","action":{"type":"text","payload":null,"label":"–ö–∞–±–∏–Ω–µ—Ç—ã"}},{"color":"primary","action":{"type":"text","payload":null,"label":"–ß—Ç–æ –¥–∞–ª—å—à–µ?"}}],[{"color":"secondary","action":{"type":"text","payload":null,"label":"–ì–¥–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å?"}},{"color":"secondary","action":{"type":"text","payload":null,"label":"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"}},{"color":"secondary","action":{"type":"text","payload":null,"label":"–ó–≤–æ–Ω–∫–∏"}}],[{"color":"secondary","action":{"type":"text","payload":null,"label":"–ü—Ä–æ—Ñ–∏–ª—å"}}]]}',
			"enter_journal_credentials"=> '{"one_time":false,"inline":true,"buttons":[[{"color":"primary","action":{"type":"text","payload":"{\"type\":3,\"after_profile\":false}","label":"–í–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å"}}]]}',
			"empty"=> '{"one_time":false,"inline":false,"buttons":[]}',
			"admin-hub"=> '{"one_time":false,"inline":false,"buttons":[[{"color":"primary","action":{"type":"text","payload":null,"label":"–†–∞—Å—Å—ã–ª–∫–∞"}},{"color":"primary","action":{"type":"text","payload":null,"label":"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"}},{"color":"negative","action":{"type":"text","payload":null,"label":"–í—ã—Ö–æ–¥"}}]]}'
		);
	}

	#region –†–∞–±–æ—Ç–∞ —Å API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
	private function sendMessageVk($vid, string $msg, string $keyboard = null, string $attachment = null) {
		$params = array(
			"peer_id" => $vid,
			"message" => $msg,
			"keyboard" => $keyboard,
			"attachment" => $attachment,
			"random_id" => 0,
			"access_token" => $_ENV['vk_token'],
			"v" => "5.131"
		);
		file_get_contents(vk_api_endpoint."messages.send?".http_build_query($params));
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	private function getKeyboardButton($label, $color, $type, $payload = null) {
		return array(
			"color" => $color,
			"action" => array(
				"type" => $type,
				"payload" => $payload,
				"label" => $label
			)
		);
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –≤—Å–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	private function getKeyboard($one_time, $is_inline, $buttons) {
		return json_encode(array("one_time"=>$one_time, "inline"=>$is_inline, "buttons"=>$buttons));
	}

	#endregion

	#region –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
	private function makeKeyboardSelectCourse($msg_id, $purpose) {
		$buttons = array(
			array(
				$this->getKeyboardButton("1", "primary", "callback", array("type"=>PAYLOAD_SELECT_COURSE, "purpose"=>$purpose, "num"=>1)),
				$this->getKeyboardButton("2", "primary", "callback", array("type"=>PAYLOAD_SELECT_COURSE, "purpose"=>$purpose, "num"=>2))
			),
			array(
				$this->getKeyboardButton("3", "primary", "callback", array("type"=>PAYLOAD_SELECT_COURSE, "purpose"=>$purpose, "num"=>3)),
				$this->getKeyboardButton("4", "primary", "callback", array("type"=>PAYLOAD_SELECT_COURSE, "purpose"=>$purpose, "num"=>4))
			)
		);
		return getKeyboard(true, true, $buttons);
	}
	#endregion

	#region –û—Ç–≤–µ—Ç—ã –¢–µ—Ö–±–æ—Ç–∞
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
	private function answerShowTerms($vid) {
		$this->sendMessageVk($vid, $this->responses['tos']);
	}

	// –ü–µ—Ä–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º
	private function answerOnMeet($vid) {
		$this->sendMessageVk($vid, $this->responses['hi1']);
		$this->sendMessageVk($vid, $this->responses['hi2'], $this->keyboards['tos']);
		$this->answerAskIfStudent($vid, 1);
	}

	// –í–æ–ø—Ä–æ—Å: –¢—ã —Å—Ç—É–¥–µ–Ω—Ç?
	private function answerAskIfStudent($vid, $progress) {
		$this->sendMessageVk($vid, $this->responses['question_are_you_student'].format(progress), $this->keyboards['yn_text']);
	}

	// –í–æ–ø—Ä–æ—Å: –ù–∞ –∫–∞–∫–æ–º —Ç—ã –∫—É—Ä—Å–µ?
	private function answerAskCourseNumber($vid, $progress) {
		$this->sendMessageVk($vid, sprintf($this->responses['question_what_is_your_course'], $progress), $this->makeKeyboardSelectCourse());
	}

	//~ // –í–æ–ø—Ä–æ—Å: –ö–∞–∫–∞—è –∏–∑ —ç—Ç–∏—Ö –≥—Ä—É–ø–ø —Ç–≤–æ—è?
	//~ private function answerAskStudentGroup($vid, $progress, $course) {
		//~ group_names = database.getGroupsByCourse(course);
		//~ $this->sendMessageVk(
			//~ $vid,
			//~ $this->responses['question_what_is_your_group'].format(progress),
			//~ self.makeKeyboardSelectGroup(group_names, None, Purposes.registration)
		//~ );
	//~ }

	//~ // –í–æ–ø—Ä–æ—Å: –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏
	//~ private function answerAskIfCanSend($vid, $progress) {
		//~ $this->sendMessageVk($vid, $this->responses['question_can_send_messages'].format(progress), $this->keyboards['yn_text']);
	//~ }

	// –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
	private function answerWrongInput($vid) {
		$this->sendMessageVk($vid, $this->responses['wrong_input']);
	}

	//~ // –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å
	//~ private function answerPostRegistration($vid, $user_type) {
		//~ if (user_type == 1) {
			//~ $this->sendMessageVk($vid, $this->responses['welcome_post_reg'], $this->keyboards['stud_hub']);
		//~ } else {
			//~ $this->sendMessageVk($vid, $this->responses['welcome_post_reg'], $this->keyboards['teacher_hub']);
		//~ }
	//~ }

	//~ private function answerSelectDate($vid, $msg_id, $target, $purpose, $edit=False) {
		//~ // –û—Ç—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã
		//~ $keyboard = self.makeKeyboardSelectRelevantDate(purpose, msg_id, target)

		//~ if not keyboard:
			//~ $this->sendMessageVk($vid, $this->responses['no_relevant_data'])
		//~ else:
			//~ if edit:
				//~ api.edit($vid, msg_id, $this->responses['pick_day'], kb=keyboard)
			//~ else:
				//~ $this->sendMessageVk($vid, $this->responses['pick_day'], kb=keyboard)

	//~ private function answerShowScheduleForGroup($vid, date, gid) {
		//~ // –ü–æ–∫–∞–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã
		//~ response = database.getScheduleDataForGroup(date, gid)

		//~ if not response:
			//~ $this->sendMessageVk($vid, $this->responses['no-data'])
			//~ return

		//~ # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ?
		//~ if response['photo_id']:
			//~ # –ü—Ä–∏–∫–æ–ª –¥–ª—è –í–∏—Ç–∞–ª–∏—è :P
			//~ if $vid == 240088163:
				//~ $this->sendMessageVk($vid, self.getRandomWaitText())
			//~ $this->sendMessageVk($vid, None, None, 'photo-'+str(self.public_id)+'_'+str(response['photo_id']))
			//~ return

		//~ # –ù–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –¥–µ–ª–∞–µ–º
		//~ msg_id = $this->sendMessageVk($vid, self.getRandomWaitText())

		//~ schedule_id = database.getScheduleId(gid, date)
		//~ pairs = database.getPairsForGroup(schedule_id)
		//~ if not pairs:
			//~ api.edit(self.$vid, self.msg_id, $this->responses['no-data'])
			//~ return
		//~ group_name = database.getGroupName(gid)

		//~ task_code = 'gsg-' + str(random.randint(0,99999))

		//~ task = graphics.GroupScheduleGenerator(
			//~ task_code,
			//~ $vid,
			//~ self.public_id,
			//~ self.themes['rasp'],
			//~ self,
			//~ 'group-schedule',
			//~ msg_id,
			//~ date,
			//~ pairs,
			//~ group_name,
			//~ schedule_id
		//~ )
		//~ self.tasks[task_code] = task
		//~ self.tasks[task_code].start()

	//~ private function answerShowScheduleForTeacher($vid, msg_id, date, teacher_id) {
		//~ // –ü–æ–∫–∞–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
		//~ response = database.getCachedScheduleOfTeacher(date, teacher_id)
		//~ if response:
			//~ # –ï—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
			//~ $this->sendMessageVk($vid, None, None, 'photo-'+str(self.public_id)+'_'+str(response['photo_id']))
			//~ return
		//~ msg_id = $this->sendMessageVk($vid, self.getRandomWaitText())

		//~ self.tasks.append(graphics.TeacherScheduleGenerator(
			//~ $vid,
			//~ self.public_id,
			//~ self.themes['rasp'],
			//~ self,
			//~ 'teacher-schedule',
			//~ msg_id,
			//~ date,
			//~ teacher_id
		//~ ))
		//~ self.tasks[-1].start()

	//~ private function answerShowGrades($vid, user_id, msg_id, login, password) {
		//~ // –ü–æ–∫–∞–∑ –æ—Ü–µ–Ω–æ–∫
		//~ # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∞–ª –æ—Ü–µ–Ω–∫–∏
		//~ photo_id = database.getMostRecentGradesImage(user_id)
		//~ if photo_id:
			//~ $this->sendMessageVk($vid, None, None, 'photo-'+str(self.public_id)+'_'+str(photo_id))
		//~ else:
			//~ $this->sendMessageVk($vid, self.getRandomWaitText())
			//~ # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∞ –æ—Ü–µ–Ω–æ–∫
			//~ self.tasks.append(graphics.GradesGenerator(
				//~ $vid,
				//~ self.public_id,
				//~ self.themes['grades'],
				//~ self,
				//~ 'grades',
				//~ msg_id,
				//~ login,
				//~ password,
				//~ $this->keyboards['enter_journal_credentials'],
				//~ user_id
			//~ ))
			//~ self.tasks[-1].start()

	//~ private function answerAskJournalLogin($vid) {
		//~ // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–æ–≥–∏–Ω –∂—É—Ä–Ω–∞–ª–∞
		//~ $this->sendMessageVk($vid, $this->responses['enter_login'], $this->keyboards['cancel'])

	//~ private function answerAskJournalPassword($vid) {
		//~ // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –∂—É—Ä–Ω–∞–ª–∞
		//~ $this->sendMessageVk($vid, $this->responses['enter_password'], $this->keyboards['cancel'])

	//~ private function answerDone($vid) {
		//~ // –û—Ç–≤–µ—Ç: –ì–æ—Ç–æ–≤–æ!
		//~ $this->sendMessageVk($vid, $this->responses['done'])

	//~ private function answerToHub($vid, user_type, text) {
		//~ // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö–∞–±
		//~ if user_type == 1:
			//~ $this->sendMessageVk($vid, text, $this->keyboards['stud_hub'])
		//~ else:
			//~ $this->sendMessageVk($vid, text, $this->keyboards['teacher_hub'])

	//~ private function answerToAdminHub($vid, text) {
		//~ // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö–∞–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
		//~ $this->sendMessageVk($vid, text, $this->keyboards['admin-hub'])

	//~ private function answerWhatsNext($vid, target, for_teacher) {
		//~ // –û—Ç–≤–µ—á–∞–µ—Ç –∫–∞–∫–∞—è –ø–∞—Ä–∞ —Å–ª–µ–¥—É—é—â–∞—è
		//~ if for_teacher:
			//~ response = database.getNextPairForTeacher(target)
		//~ else:
			//~ response = database.getNextPairForGroup(target)

		//~ if not response:
			//~ $this->sendMessageVk($vid, $this->responses['get-next-fail'])
			//~ return

		//~ # –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
		//~ hours_left = response['dt'] * 24
		//~ minutes_left = (hours_left - int(hours_left)) * 60

		//~ if for_teacher == False:
			//~ $this->sendMessageVk($vid, $this->responses['get-next-student'].format(
				//~ str(round(hours_left)) + ' ' + formatHoursGen(round(hours_left)),
				//~ str(round(minutes_left)) + ' ' + formatMinutesGen(round(minutes_left)),
				//~ response['pair_name'],
				//~ response['pair_place'],
				//~ response['pair_time']
			//~ ))
		//~ else:
			//~ $this->sendMessageVk($vid, $this->responses['get-next-teacher'].format(
				//~ str(round(hours_left)) + ' ' + formatHoursGen(round(hours_left)),
				//~ str(round(minutes_left)) + ' ' + formatMinutesGen(round(minutes_left)),
				//~ response['pair_name'],
				//~ response['pair_time'],
				//~ response['pair_group'],
				//~ response['pair_place']
			//~ ))

	//~ private function answerSelectTeacher($vid, message_id, purpose) {
		//~ // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è

		//~ # –£–∑–Ω–∞—ë–º –∫–∞–∫–∏–µ –≤–æ–æ–±—â–µ –µ—Å—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏
		//~ teachers = database.getAllTeachers()
		//~ keyboards = self.makeTeacherSelectKeyboards(teachers, purpose, message_id)
		//~ amount = len(keyboards)

		//~ for index, k in enumerate(keyboards) {
			//~ $this->sendMessageVk($vid, $this->responses['select-teacher'].format(index + 1, amount), k)

	//~ private function answerUpdateHub($vid, user_type) {
		//~ // –ü—Ä–∏—Å—ã–ª–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ–Ω—é
		//~ if user_type == 1:
			//~ $this->sendMessageVk($vid, $this->responses['updating-menu'], $this->keyboards['stud_hub'])

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫—É—Ä—Å–∞
	private function answerSelectGroupCourse($vid, $msg_id, $purpose, $edit) {
		$keyboard = $this->keyboardSelectCourse($msg_id, $purpose)
		if ($edit) {
			$this->editMessageVk($vid, $msg_id, $this->responses['select-course'], keyboard);
		} else {
			$this->sendMessageVk($vid, $this->responses['select-course'], keyboard);
		}

	//~ private function answerSelectGroupSpec($vid, msg_id, course, purpose) {
		//~ // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã
		//~ group_names = database.getGroupsByCourse(course)
		//~ api.edit(
			//~ $vid,
			//~ msg_id,
			//~ $this->responses['select-group'],
			//~ self.makeKeyboardSelectGroup(group_names, msg_id, purpose)
		//~ )

	//~ private function answerBells($vid) {
		//~ // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∑–≤–æ–Ω–∫–æ–≤
		//~ $this->sendMessageVk($vid, $this->responses['bells-schedule'])

	//~ private function answerShowProfile($vid, msg_id, user, edit) {
		//~ // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
		//~ message = ""

		//~ if user['type'] == 1:
			//~ # –°—Ç—É–¥–µ–Ω—Ç
			//~ message += $this->responses['profile-identifier-student'].format(database.getGroupName(user['gid']))
			//~ if user['journal_login'] == None:
				//~ message += $this->responses['profile-journal-not-filled']
			//~ else:
				//~ message += $this->responses['profile-journal-filled'].format(user['journal_login'])
		//~ else:
			//~ # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
			//~ message += $this->responses['profile-identifier-teacher'].format(database.getTeacherSurname(user['teacher_id']))

		//~ if user['allows_mail'] == 1:
			//~ message += $this->responses['profile-mail-allowed']
		//~ else:
			//~ message += $this->responses['profile-mail-not-allowed']

		//~ keyboard = self.makeProfileKeyboard(msg_id, user)

		//~ if edit:
			//~ api.edit($vid, msg_id, message, keyboard)
		//~ else:
			//~ $this->sendMessageVk($vid, message, keyboard)

	//~ private function answerAskTeacherSignature($vid, question_progress) {
		//~ // –ü—Ä–æ—Å–∏—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å —Å–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞
		//~ return $this->sendMessageVk($vid, $this->responses['question-who-are-you'].format(question_progress), $this->keyboards['empty'])

	//~ private function answerAskCabNumber($vid) {
		//~ // –ü—Ä–æ—Å–∏—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –∫–∞–±–∏–Ω–µ—Ç
		//~ $this->sendMessageVk($vid, $this->responses['type-cabinet'], $this->keyboards['cancel'])

	//~ private function answerShowCabinetOccupancy($vid, date, place) {
		//~ // –ü–æ–∫–∞–∑ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –∫–∞–±–∏–Ω–µ—Ç–æ–≤
		//~ response = database.getCachedPlaceOccupancy(date, place)
		//~ if response:
			//~ # –ï—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
			//~ $this->sendMessageVk($vid, None, None, 'photo-'+str(self.public_id)+'_'+str(response['photo_id']))
			//~ return

		//~ msg_id = $this->sendMessageVk($vid, self.getRandomWaitText())
		//~ self.tasks.append(graphics.CabinetGenerator(
			//~ $vid,
			//~ self.public_id,
			//~ self.themes['rasp'],
			//~ self,
			//~ 'teacher-schedule',
			//~ msg_id,
			//~ date,
			//~ place
		//~ ))
		//~ self.tasks[-1].start()

	//~ private function answerAskTeacherWhenEditing($vid) {
		//~ // –ü—Ä–æ—Å–∏—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å —Å–µ–±—è –∫–æ–≥–¥–∞ –æ–Ω –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∏–∑ —Å—Ç—É–¥–µ–Ω—Ç–∞
		//~ return $this->sendMessageVk($vid, $this->responses['question-who-are-you-no-number'])

	//~ private function answerOnStartedEdit($vid) {
		//~ // –ù—É–∂–Ω–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–º–µ–Ω—ã —Ç–∏–ø–∞ –ø—Ä–æ—Ñ–∏–ª—è
		//~ return $this->sendMessageVk($vid, $this->responses['started-editing'], $this->keyboards['empty'])

	//~ private function answerShowAdminPanel($vid) {
		//~ // –ü–æ–∫–∞–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
		//~ $this->sendMessageVk($vid, $this->responses['admin-welcome'], $this->keyboards['admin-hub'])

	//~ private function answerAskMailTarget($vid) {
		//~ // –ü—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª—å —Ä–∞—Å—Å—ã–ª–∫–∏
		//~ $this->sendMessageVk($vid, $this->responses['enter-mail-target'], $this->keyboards['cancel'])

	//~ private function answerAskMailMessage($vid) {
		//~ // –ü—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
		//~ $this->sendMessageVk($vid, $this->responses['enter-mail-message'], $this->keyboards['cancel'])

	//~ private function answerMailDisabled($vid) {
		//~ // –£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
		//~ $this->sendMessageVk($vid, $this->responses['mail-disabled'])

	//~ private function answerShowStats($vid, file_id) {
		//~ // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
		//~ $this->sendMessageVk($vid, $this->responses['stats'], None, 'doc'+str($vid)+'_'+str(file_id))

	#endregion

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	private function handlePlainMessage($text, &$user, $msg_id): bool {
		$vid = $user['vk_id'];
		
		//~ if ($user['state'] == STATE_HUB) {;
			//~ if ($text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ') {;
				//~ if ($user['type'] == 1) {;
					//~ $this->answerSelectDate($vid, $msg_id + 1, $user['gid'], Purposes.stud_rasp_view);;
				//~ } else {;
					//~ $this->answerSelectDate($vid, $msg_id + 1, $user['teacher_id'], Purposes.teacher_rasp_view);;
				//~ };
				//~ database.addStatRecord($user['gid'], $user['type'], 1);;
			//~ if ($text == '–û—Ü–µ–Ω–∫–∏' and $user['type'] == 1) {;
				//~ $this->answerShowGrades($vid, $user['id'], $msg_id + 1, $user['journal_login'], $user['journal_password']);
				//~ database.addStatRecord($user['gid'], $user['type'], 2);
			//~ if ($text == '–ö–∞–±–∏–Ω–µ—Ç—ã' and $user['type'] == 2) {;
				//~ $user['state'] = States.enter_cab;
				//~ $this->answerAskCabNumber($vid);
				//~ database.addStatRecord($user['gid'], $user['type'], 7);
				//~ return true;
			//~ if ($text == '–ß—Ç–æ –¥–∞–ª—å—à–µ?') {;
				//~ if ($user['type'] == 1) {;
					//~ $this->answerWhatsNext($vid, $user['gid'], false);
				//~ else { {;
					//~ $this->answerWhatsNext($vid, $user['teacher_id'], true);
				//~ database.addStatRecord($user['gid'], $user['type'], 3);
			//~ if ($text == '–ì–¥–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å?') {;
				//~ $this->answerSelectTeacher($vid, $msg_id + 1, Purposes.teacher_rasp_view);
				//~ database.addStatRecord($user['gid'], $user['type'], 4);
			//~ if ($text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã') {;
				//~ $this->answerSelectGroupCourse($vid, $msg_id + 1, Purposes.stud_rasp_view, false);
				//~ database.addStatRecord($user['gid'], $user['type'], 5);
			//~ if ($text == '–ó–≤–æ–Ω–∫–∏') {;
				//~ $this->answerBells($vid);
				//~ database.addStatRecord($user['gid'], $user['type'], 6);
			//~ if ($text == '–ü—Ä–æ—Ñ–∏–ª—å') {;
				//~ $this->answerShowProfile($vid, $msg_id + 1, $user, false);
			//~ if ($text == '.') {;
				//~ $this->answerUpdateHub($vid, $user['type']);
			//~ if ($text == 'admin' and $user['admin']) {;
				//~ // "–û–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä—è–º–æ —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π –∏ —Ç—ã –µ–≥–æ –¥–∞–∂–µ –Ω–µ –∑–∞–º–µ—á–∞–µ—à—å" - –ú–∞–π–∫, –∏–∑ —Å–µ—Ä–∏–∞–ª–∞ "–û—á–µ–Ω—å —Å—Ç—Ä–∞–Ω–Ω—ã–µ –¥–µ–ª–∞";
				//~ $user['state'] = States.admin;
				//~ $this->answerShowAdminPanel($vid);
				//~ return true;
			//~ return false;
		//~ if ($user['state'] == STATE_VOID) {;
			//~ // –ó–∞–≥–ª—É—à–∫–∞;
			//~ return false;

		if ($user['state'] == STATE_REG_1) {
			// –ü–æ—Å–ª–µ "–¢—ã —Å—Ç—É–¥–µ–Ω—Ç?
			if ($text == '–î–∞') {
				// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å—Ç—É–¥–µ–Ω—Ç
				$user['type'] = 1;
				$user['question_progress'] += 1;
				$user['state'] = STATE_SELECT_COURSE;
				$this->answerAskCourseNumber($vid, $user['question_progress']);
				return true;
			} else if ($text == '–ù–µ—Ç') {
				// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å;
				$user['type'] = 2;
				$user['question_progress'] += 1;
				$user['state'] = STATE_VOID;
				$msg_id = $this->answerAskTeacherSignature($vid, $user['question_progress']);
				$this->answerSelectTeacher($vid, $msg_id + 1, Purposes.registration);
				return true;
			} else {
				// –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥;
				$this->answerWrongInput($vid);
				return false;
			};
		};
		
		if ($user['state'] == STATE_SELECT_COURSE) {;
			// –ü–æ—Å–ª–µ "–ù–∞ –∫–∞–∫–æ–º —Ç—ã –∫—É—Ä—Å–µ?" –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏;
			if (!(is_numeric($text) || 1 <= intval($text) <= 4)) {;
				$this->answerWrongInput($vid);
				return false;
//~ ;
			$user['state'] = STATE_VOID;
			$user['question_progress'] += 1;
//~ ;
			$this->answerAskStudentGroup($vid, $user['question_progress'], $text);
//~ ;
			return true;
;
		//~ if ($user['state'] == States.reg_can_send) {;
			//~ // –ü–æ—Å–ª–µ "–ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è?" –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏;
			//~ if ($text == '–î–∞') {;
				//~ $user['allows_mail'] = 1;
			//~ else if ($text == '–ù–µ—Ç') {;
				//~ $user['allows_mail'] = 0;
			//~ else { {;
				//~ $this->answerWrongInput($vid);
				//~ return false;
;
			//~ $user['state'] = States.hub;
			//~ $this->answerPostRegistration($vid, $user['type']);
			//~ return true;
;
		//~ if ($user['state'] == States.enter_login or $user['state'] == States.enter_login_after_profile) {;
			//~ // –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞;
			//~ if ($this->checkIfCancelled($text, $user)) {;
				//~ return true;
			//~ $user['journal_login'] = $text;
			//~ if ($user['state'] == States.enter_login) {;
				//~ $user['state'] = States.enter_password;
			//~ else { {;
				//~ $user['state'] = States.enter_password_after_profile;
			//~ $this->answerAskJournalPassword($vid);
			//~ return true;

		//~ if ($user['state'] == States.enter_password or $user['state'] == States.enter_password_after_profile) {;
			//~ // –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è;
			//~ if ($this->checkIfCancelled($text, $user)) {;
				//~ return true;
			//~ $user['journal_password'] = hashlib.sha1(bytes($text, "utf-8")).hexdigest();

			//~ $this->answerDone($vid);
			//~ $this->answerToHub($vid, $user['type'], $this->answers['returning']);
			//~ if ($user['state'] == States.enter_password_after_profile) {;
				//~ $this->answerShowProfile($vid, $msg_id + 1, $user, false);

			//~ $user['state'] = States.hub;
			//~ return true;

		//~ if ($user['state'] == States.enter_cab) {;
			//~ // –í–≤–æ–¥ –∫–∞–±–∏–Ω–µ—Ç–∞;
			//~ if ($this->checkIfCancelled($text, $user)) {;
				//~ return true;
			//~ $user['state'] = States.hub;
			//~ $this->answerToHub($vid, $user['type'], $this->answers['returning']);
			//~ $this->answerSelectDate($vid, $msg_id + 1, $text, Purposes.view_cabinets);
			//~ return true;

		//~ if ($user['state'] == States.admin) {;
			//~ if ($text == '–í—ã—Ö–æ–¥') {;
				//~ $user['state'] = States.hub;
				//~ $this->answerToHub($vid, $user['type'], $this->answers['returning']);
				//~ return true;

			//~ if ($text == '–†–∞—Å—Å—ã–ª–∫–∞') {;
				//~ $user['state'] = States.mail_input_target;
				//~ database.addMailRecord($user['id']);
				//~ $this->answerAskMailTarget($vid);
				//~ return true;

			//~ if ($text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {;
				//~ // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML;
				//~ path = $this->generateHtmlStats();
				//~ // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç;
				//~ doc_id = api.uploadDocument($vid, path);
				//~ $this->answerShowStats($vid, doc_id);
		//~ if ($user['state'] == States.mail_input_target) {;
			//~ mail_id = database.getMostRecentMailRecord($user['id']);
			//~ if ($text == '–û—Ç–º–µ–Ω–∞') {;
				//~ $user['state'] = States.admin;
				//~ $this->answerToAdminHub($vid, $this->answers['returning']);
				//~ database.deleteMail(mail_id);
				//~ return true;
			//~ $user['state'] = States.mail_input_message;
			//~ database.updateMail(mail_id, 'target', $text);
			//~ $this->answerAskMailMessage($vid);
			//~ return true;
		//~ if ($user['state'] == States.mail_input_message) {;
			//~ mail_id = database.getMostRecentMailRecord($user['id']);
			//~ $user['state'] = States.admin;
			//~ if ($text == '–û—Ç–º–µ–Ω–∞') {;
				//~ database.deleteMail(mail_id);
				//~ $this->answerToAdminHub($vid, $this->answers['returning']);
			//~ else { {;
				//~ database.updateMail(mail_id, 'message', $text);
				//~ api.tgAlert(;
					//~ '–ê–≤—Ç–æ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏) { https) {//vk.com/id'+str($user['vk_id'])+'. –¢–µ–∫—Å—Ç) { '+$text,;
					//~ '–°–æ–∑–¥–∞–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ —Ç–µ—Ö–±–æ—Ç–µ';
				//~ );
				//~ mail_info = database.getMailInfo(mail_id);
				//~ mail_$users = database.getUsersByMask(mail_info['target']);
				//~ api.massSend(;
					//~ mail_$users,;
					//~ mail_info['message'],;
					//~ $this->keyboards['unsubscribe'];
				//~ );
				//~ $this->answerToAdminHub($vid, $this->answers['mail-saved'].format(len(mail_$users)));
			//~ return true
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
	public function handleRequest() {
		$data = json_decode(file_get_contents("php://input"));

		switch ($data->type) {

			// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
			case "confirmation":
				exit($_ENV['confirmation_token']);
				break;

			// –ù–æ–≤–æ–µ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			case "message_new":
				$vid = $data->object->message->from_id;
				$text = $data->object->message->text;
				$msg_id = $data->object->message->id;

				if (strlen($text) == 0) {
					// –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
					break;
				}

				// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
				$user = UserModel::where("vk_id", $vid);
				if (!$user) {
					// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ
					$this->answerOnMeet($vid);
					UserModel::create([
						"vk_id" => $vid,
						"state" => 0
					]);
					break;
				}

				$user = $user->fetchArray();
				// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (—Å –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ)
				if (property_exists($data->object->message, "payload")) {
					// –ï—Å—Ç—å –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
					$payload = $data->object->message->payload;
					$need_update = $this->handleMessageWithPayload($payload, $user, $msg_id);
				} else {
					// –û–±—ã—á–Ω–æ–µ
					$payload = null;
					$need_update = $this->handlePlainMessage($text, $user, $msg_id);
				}

				if ($need_update) {
					UserModel::save($user);
				}

			// TODO: message_event
			// TODO: message_deny
			// TODO: message_allow
		}

		echo "ok";
	}
}
